// vite.config.mts
import { resolve as resolve2 } from "node:path";
import { defineConfig } from "file:///Users/avabagherzadeh/Desktop/projects/personal/filliny-web-extension/node_modules/.pnpm/vite@5.4.9_@types+node@20.16.10_sass@1.79.4_terser@5.34.1/node_modules/vite/dist/node/index.js";
import libAssetsPlugin from "file:///Users/avabagherzadeh/Desktop/projects/personal/filliny-web-extension/node_modules/.pnpm/@laynezh+vite-plugin-lib-assets@0.5.24_vite@5.4.9_@types+node@22.7.4_sass@1.79.4_terser@5.34.1_/node_modules/@laynezh/vite-plugin-lib-assets/dist/index.js";

// utils/plugins/make-manifest-plugin.ts
import fs from "node:fs";
import { resolve } from "node:path";
import { pathToFileURL } from "node:url";
import process from "node:process";
import {
  colorLog,
  ManifestParser,
} from "file:///Users/avabagherzadeh/Desktop/projects/personal/filliny-web-extension/packages/dev-utils/dist/index.js";
var __vite_injected_original_dirname =
  "/Users/avabagherzadeh/Desktop/projects/personal/filliny-web-extension/chrome-extension/utils/plugins";
var rootDir = resolve(__vite_injected_original_dirname, "..", "..");
var manifestFile = resolve(rootDir, "manifest.js");
var getManifestWithCacheBurst = () => {
  const withCacheBurst = path => `${path}?${Date.now().toString()}`;
  if (process.platform === "win32") {
    return import(withCacheBurst(pathToFileURL(manifestFile).href));
  }
  return import(withCacheBurst(manifestFile));
};
function makeManifestPlugin(config) {
  function makeManifest(manifest, to) {
    if (!fs.existsSync(to)) {
      fs.mkdirSync(to);
    }
    const manifestPath = resolve(to, "manifest.json");
    const isFirefox = process.env.__FIREFOX__ === "true";
    fs.writeFileSync(manifestPath, ManifestParser.convertManifestToString(manifest, isFirefox ? "firefox" : "chrome"));
    colorLog(`Manifest file copy complete: ${manifestPath}`, "success");
  }
  return {
    name: "make-manifest",
    buildStart() {
      this.addWatchFile(manifestFile);
    },
    async writeBundle() {
      const outDir2 = config.outDir;
      const manifest = await getManifestWithCacheBurst();
      makeManifest(manifest.default, outDir2);
    },
  };
}

// vite.config.mts
import {
  watchPublicPlugin,
  watchRebuildPlugin,
} from "file:///Users/avabagherzadeh/Desktop/projects/personal/filliny-web-extension/packages/hmr/dist/index.js";
import {
  isDev,
  isProduction,
  watchOption,
} from "file:///Users/avabagherzadeh/Desktop/projects/personal/filliny-web-extension/packages/vite-config/index.mjs";
var __vite_injected_original_dirname2 =
  "/Users/avabagherzadeh/Desktop/projects/personal/filliny-web-extension/chrome-extension";
var rootDir2 = resolve2(__vite_injected_original_dirname2);
var srcDir = resolve2(rootDir2, "src");
var outDir = resolve2(rootDir2, "..", "dist");
var vite_config_default = defineConfig({
  resolve: {
    alias: {
      "@root": rootDir2,
      "@src": srcDir,
      "@assets": resolve2(srcDir, "assets"),
    },
  },
  plugins: [
    libAssetsPlugin({
      outputPath: outDir,
    }),
    watchPublicPlugin(),
    makeManifestPlugin({ outDir }),
    isDev && watchRebuildPlugin({ reload: true }),
  ],
  publicDir: resolve2(rootDir2, "public"),
  build: {
    lib: {
      formats: ["iife"],
      entry: resolve2(__vite_injected_original_dirname2, "src/background/index.ts"),
      name: "BackgroundScript",
      fileName: "background",
    },
    outDir,
    emptyOutDir: false,
    sourcemap: isDev,
    minify: isProduction,
    reportCompressedSize: isProduction,
    watch: watchOption,
    rollupOptions: {
      external: ["chrome"],
    },
  },
  envDir: "../",
});
export { vite_config_default as default };
//# sourceMappingURL=data:application/json;base64,
